import type { Context } from 'telegraf';
import type { Update } from 'telegraf/typings/core/types/typegram';
import createDebug from 'debug';
import { getWeather } from '../api/fetch';
import { reply } from '../utils/reply';

const debug = createDebug('bot:location_text');

const location = (apiKey: string) => async (ctx: Context<Update>) => {
  debug('Triggered "location" text command');

  const messageId = ctx.message?.message_id;
  // @ts-ignore
  const { latitude, longitude, live_period } = ctx.message?.location;

  if (messageId) {
    if (live_period) {
      await reply(ctx, '–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª—è–µ–º–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç–∞—Ç–∏—á–Ω—É—é üåê');
      return;
    }
    const answer = await getWeather(apiKey, latitude, longitude);
    const wind = answer.wind.speed > 0 ? `<i>–í–µ—Ç–µ—Ä</i> ${answer.wind.speed} –º/—Å` : '–®—Ç–∏–ª—å';
    const message = `
<b>${answer.name}</b>
<i>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</i> ${answer.main.temp} ‚ÑÉ
<i>–ü–æ –æ—â—É—â–µ–Ω–∏—é</i> ${answer.main.feels_like} ‚ÑÉ
<i>–í–ª–∞–∂–Ω–æ—Å—Ç—å</i> ${answer.main.humidity}%
<i>–î–∞–≤–ª–µ–Ω–∏–µ</i> ${answer.main.pressure} –º–º —Ä—Ç. —Å—Ç.
${wind}
  `;
    await reply(ctx, message, { messageId, parseMode: 'HTML' });
  }
};

export { location };
